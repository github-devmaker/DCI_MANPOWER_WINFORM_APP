import { createHotContext as __vite__createHotContext } from "/dcimanpower/@vite/client";import.meta.hot = __vite__createHotContext("/src/pages/diagramsvg.jsx");import.meta.env = {"VITE_PATH":"dcimanpower","VITE_API":"http://dciweb.dci.daikin.co.jp/dcimanpowerapi","VITE_VERSION":"3.9","BASE_URL":"/dcimanpower/","MODE":"development","DEV":true,"PROD":false,"SSR":false};import * as RefreshRuntime from "/dcimanpower/@react-refresh";

if (!window.$RefreshReg$) throw new Error("React refresh preamble was not loaded. Something is wrong.");
const prevRefreshReg = window.$RefreshReg$;
const prevRefreshSig = window.$RefreshSig$;
window.$RefreshReg$ = RefreshRuntime.getRefreshReg("D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx");
window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;

import __vite__cjsImport1_react_jsxDevRuntime from "/dcimanpower/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=68d587f7"; const _jsxDEV = __vite__cjsImport1_react_jsxDevRuntime["jsxDEV"]; const _Fragment = __vite__cjsImport1_react_jsxDevRuntime["Fragment"];
var _s = $RefreshSig$();
import { Box, Button, IconButton, Paper, Stack, Table, TableBody, TableCell, TableContainer, TableRow, TextField, Typography } from "/dcimanpower/node_modules/.vite/deps/@mui_material.js?v=68d587f7";
import axios from "/dcimanpower/node_modules/.vite/deps/axios.js?v=68d587f7";
import __vite__cjsImport4_react from "/dcimanpower/node_modules/.vite/deps/react.js?v=68d587f7"; const useState = __vite__cjsImport4_react["useState"]; const useEffect = __vite__cjsImport4_react["useEffect"];
import { FaPlus, FaTrash } from "/dcimanpower/node_modules/.vite/deps/react-icons_fa.js?v=68d587f7";
import { GetPoint, InsertPoint, servGetEquipment } from "/dcimanpower/src/Service.js";
function DiagramSVG() {
    _s();
    const [mousePos, setMousePos] = useState({});
    const [equipment, setEquipment] = useState();
    const [point, setPoint] = useState();
    const [ObjSelected, setObjSelected] = useState();
    const [state, setState] = useState('');
    const [svgAxis, setSvgAxis] = useState({
        x: 0,
        y: 15
    });
    const [nameObj, setNameObj] = useState('');
    const [wObj, setWObj] = useState(0);
    const [hObj, setHObj] = useState(0);
    const [descObj, setDescObj] = useState('');
    const [translateCursor, setTranslateCursor] = useState();
    const [openAddMaster, setOpenAddMaster] = useState(false);
    const API = import.meta.env.VITE_API;
    // const reducer = useSelector((state) => state.reducer);
    // const dispatch = useDispatch();
    useEffect(()=>{
        // insertSvg();
        FetchObject();
        getEquipment();
        const handleMouseMove = (event)=>{
            const svg = document.getElementById('svg_selected');
            const w = svg?.getAttribute('w');
            const h = svg?.getAttribute('h');
            setMousePos({
                x: event.offsetX,
                y: event.offsetY
            });
            setSvgAxis({
                x: event.offsetX,
                y: event.offsetY
            });
            setTranslateCursor('translate(' + (event.offsetX - w / 2) + ',' + (event.offsetY - h / 2) + ')  ');
        };
        const svgLayout = document.getElementById('svg_layout');
        svgLayout?.addEventListener('mousemove', handleMouseMove);
        // let svg = document.querySelector("#svg_layout");
        // let rects = document.querySelectorAll("rect");
        // rects.forEach(rect => {
        //     rect.addEventListener("mouseenter", e => {
        //         svg?.appendChild(rect);
        //     });
        // });
        return ()=>{
            svgLayout?.removeEventListener('mousemove', handleMouseMove);
        };
    }, []);
    const FetchObject = ()=>{
        servGetEquipment().then((res)=>{
            setEquipment(res);
        });
    };
    const getEquipment = ()=>{
        GetPoint().then((result)=>{
            setPoint(result);
        }).catch((err)=>{
            console.log(err);
        });
    };
    const AddPoint = async ()=>{
        // if (objSelected.objType == 'LINE' && objSelected.objAxis == 'X') {
        //     data = { objId: objSelected.objId, posId: 0, posX: mousePos.x, posY: mousePos.y, posW: (mousePos.x + parseInt(objSelected.objW)), posH: mousePos.y, posName: 'TEST', status: 'ACTIVE' }
        // } else if (objSelected.objType == 'LINE' && objSelected.objAxis == 'Y') {
        //     data = { objId: objSelected.objId, posId: 0, posX: mousePos.x, posY: mousePos.y, posW: mousePos.x, posH: mousePos.y + parseInt(objSelected.objH), posName: 'TEST', status: 'ACTIVE' }
        // } else {
        if (ObjSelected != null) {
            const svg = document.getElementById('svg_selected');
            const w = svg?.getAttribute('w');
            const h = svg?.getAttribute('h');
            let data = {
                ObjId: ObjSelected.objId,
                PosX: mousePos.x - w / 2,
                PosY: mousePos.y - h / 2,
                PosW: ObjSelected.objW,
                PosH: ObjSelected.objH,
                PosName: 'TEST',
                Status: 'ACTIVE'
            };
            if (state == '' || state == 'add') {
                let insertPoint = await InsertPoint(data);
                if (insertPoint.status) {
                    getEquipment();
                }
            }
        }
    };
    const RemovePoint = (posId)=>{
        if (state == 'remove') {
            axios.get(`${API}/removepoint/${posId}`).then((res)=>{
                getEquipment();
            }).catch((error)=>{
                alert(error);
            });
        }
    };
    const initSVGpoint = (item, index = 0)=>{
        switch(item.type){
            case 'REAT':
                return /*#__PURE__*/ _jsxDEV(_Fragment, {
                    children: [
                        /*#__PURE__*/ _jsxDEV("text", {
                            fill: "red",
                            x: item.x,
                            y: item.y,
                            children: item.name
                        }, void 0, false, {
                            fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
                            lineNumber: 97,
                            columnNumber: 21
                        }, this),
                        /*#__PURE__*/ _jsxDEV("rect", {
                            x: item.x,
                            y: item.y,
                            width: item.w,
                            height: item.h,
                            style: {
                                stroke: 'black',
                                strokeWidth: '1'
                            },
                            fill: "white"
                        }, void 0, false, {
                            fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
                            lineNumber: 98,
                            columnNumber: 21
                        }, this)
                    ]
                }, void 0, true);
            case 'CIRCLE':
                return /*#__PURE__*/ _jsxDEV("circle", {
                    cx: item.x,
                    cy: item.y,
                    r: item.r,
                    style: {
                        stroke: 'black',
                        strokeWidth: '1'
                    },
                    fill: "red"
                }, void 0, false, {
                    fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
                    lineNumber: 101,
                    columnNumber: 24
                }, this);
            case 'LINE':
                if (item.axis == 'X') {
                    return /*#__PURE__*/ _jsxDEV(_Fragment, {
                        children: /*#__PURE__*/ _jsxDEV("line", {
                            x1: item.x,
                            y1: item.y,
                            x2: item.w,
                            y2: item.y,
                            style: {
                                stroke: 'black',
                                strokeWidth: 3
                            }
                        }, void 0, false, {
                            fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
                            lineNumber: 106,
                            columnNumber: 25
                        }, this)
                    }, void 0, false);
                } else {
                    return /*#__PURE__*/ _jsxDEV(_Fragment, {
                        children: /*#__PURE__*/ _jsxDEV("line", {
                            x1: item.x,
                            y1: item.y,
                            x2: item.x,
                            y2: item.h,
                            style: {
                                stroke: 'black',
                                strokeWidth: 3
                            }
                        }, void 0, false, {
                            fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
                            lineNumber: 111,
                            columnNumber: 25
                        }, this)
                    }, void 0, false);
                }
            default:
                break;
        }
    };
    function clearPoint() {
        axios.get(`${API}/clearpoint`).then((res)=>{
            getEquipment();
        }).then((error)=>{
            console.log(error);
        });
    }
    function insertSvg() {
        if (nameObj.trim().length > 0 && descObj.trim().length) {
            axios.post(`${API}/insertpoint`, {
                title: nameObj,
                code: descObj,
                w: wObj,
                h: hObj
            }).then((res)=>{
                FetchObject();
            }).catch((error)=>{
                console.log(error);
            });
        }
    }
    function removeSvg(objId) {
        axios.get(`${API}/removeobject/${objId}`).then((res)=>{
            FetchObject();
        });
    }
    return /*#__PURE__*/ _jsxDEV("div", {
        className: "p-3"
    }, void 0, false, {
        fileName: "D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx",
        lineNumber: 143,
        columnNumber: 9
    }, this);
}
_s(DiagramSVG, "pg/vseWBp95URTRsiJRV0rfPKXw=");
_c = DiagramSVG;
export default DiagramSVG;
var _c;
$RefreshReg$(_c, "DiagramSVG");


window.$RefreshReg$ = prevRefreshReg;
window.$RefreshSig$ = prevRefreshSig;
RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
  RefreshRuntime.registerExportsForReactRefresh("D:/git/DCI_MANPOWER_CHECKIN_APP/src/pages/diagramsvg.jsx", currentExports);
  import.meta.hot.accept((nextExports) => {
    if (!nextExports) return;
    const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate(currentExports, nextExports);
    if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
  });
});

//# sourceMappingURL=data:application/json;base64,